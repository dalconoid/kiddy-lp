// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KiddyClient is the client API for Kiddy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KiddyClient interface {
	SubscribeOnSportsLines(ctx context.Context, opts ...grpc.CallOption) (Kiddy_SubscribeOnSportsLinesClient, error)
}

type kiddyClient struct {
	cc grpc.ClientConnInterface
}

func NewKiddyClient(cc grpc.ClientConnInterface) KiddyClient {
	return &kiddyClient{cc}
}

func (c *kiddyClient) SubscribeOnSportsLines(ctx context.Context, opts ...grpc.CallOption) (Kiddy_SubscribeOnSportsLinesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Kiddy_ServiceDesc.Streams[0], "/api.Kiddy/SubscribeOnSportsLines", opts...)
	if err != nil {
		return nil, err
	}
	x := &kiddySubscribeOnSportsLinesClient{stream}
	return x, nil
}

type Kiddy_SubscribeOnSportsLinesClient interface {
	Send(*SubscribeRequest) error
	Recv() (*LinesDeltas, error)
	grpc.ClientStream
}

type kiddySubscribeOnSportsLinesClient struct {
	grpc.ClientStream
}

func (x *kiddySubscribeOnSportsLinesClient) Send(m *SubscribeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *kiddySubscribeOnSportsLinesClient) Recv() (*LinesDeltas, error) {
	m := new(LinesDeltas)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KiddyServer is the server API for Kiddy service.
// All implementations must embed UnimplementedKiddyServer
// for forward compatibility
type KiddyServer interface {
	SubscribeOnSportsLines(Kiddy_SubscribeOnSportsLinesServer) error
	mustEmbedUnimplementedKiddyServer()
}

// UnimplementedKiddyServer must be embedded to have forward compatible implementations.
type UnimplementedKiddyServer struct {
}

func (UnimplementedKiddyServer) SubscribeOnSportsLines(Kiddy_SubscribeOnSportsLinesServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeOnSportsLines not implemented")
}
func (UnimplementedKiddyServer) mustEmbedUnimplementedKiddyServer() {}

// UnsafeKiddyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KiddyServer will
// result in compilation errors.
type UnsafeKiddyServer interface {
	mustEmbedUnimplementedKiddyServer()
}

func RegisterKiddyServer(s grpc.ServiceRegistrar, srv KiddyServer) {
	s.RegisterService(&Kiddy_ServiceDesc, srv)
}

func _Kiddy_SubscribeOnSportsLines_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KiddyServer).SubscribeOnSportsLines(&kiddySubscribeOnSportsLinesServer{stream})
}

type Kiddy_SubscribeOnSportsLinesServer interface {
	Send(*LinesDeltas) error
	Recv() (*SubscribeRequest, error)
	grpc.ServerStream
}

type kiddySubscribeOnSportsLinesServer struct {
	grpc.ServerStream
}

func (x *kiddySubscribeOnSportsLinesServer) Send(m *LinesDeltas) error {
	return x.ServerStream.SendMsg(m)
}

func (x *kiddySubscribeOnSportsLinesServer) Recv() (*SubscribeRequest, error) {
	m := new(SubscribeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Kiddy_ServiceDesc is the grpc.ServiceDesc for Kiddy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Kiddy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Kiddy",
	HandlerType: (*KiddyServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeOnSportsLines",
			Handler:       _Kiddy_SubscribeOnSportsLines_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/kiddy.proto",
}
